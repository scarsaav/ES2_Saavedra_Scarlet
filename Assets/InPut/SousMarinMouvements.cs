//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InPut/SousMarinMouvements.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SousMarinMouvements: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SousMarinMouvements()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SousMarinMouvements"",
    ""maps"": [
        {
            ""name"": ""SousMarin"",
            ""id"": ""0728952e-54af-4df1-9563-a76302894902"",
            ""actions"": [
                {
                    ""name"": ""Deplacement"",
                    ""type"": ""Value"",
                    ""id"": ""6f083aa7-e730-4687-93ea-b2fc8387bf9a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vitesse"",
                    ""type"": ""Button"",
                    ""id"": ""41c7699c-1004-44d3-bba1-855ef974478c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0651c4d5-a474-47e9-aa37-0ba83f6f255f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Deplacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c961793a-e85a-4915-bcdd-7095799c64bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Deplacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57e00470-8588-4c40-a570-6111dd48c4e3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Deplacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f83fe79f-2ff1-4f0e-bfec-283777614e60"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Deplacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8844ab85-fc6a-45cf-a47d-5c3ead08dff8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Vitesse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SousMarin
        m_SousMarin = asset.FindActionMap("SousMarin", throwIfNotFound: true);
        m_SousMarin_Deplacement = m_SousMarin.FindAction("Deplacement", throwIfNotFound: true);
        m_SousMarin_Vitesse = m_SousMarin.FindAction("Vitesse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SousMarin
    private readonly InputActionMap m_SousMarin;
    private List<ISousMarinActions> m_SousMarinActionsCallbackInterfaces = new List<ISousMarinActions>();
    private readonly InputAction m_SousMarin_Deplacement;
    private readonly InputAction m_SousMarin_Vitesse;
    public struct SousMarinActions
    {
        private @SousMarinMouvements m_Wrapper;
        public SousMarinActions(@SousMarinMouvements wrapper) { m_Wrapper = wrapper; }
        public InputAction @Deplacement => m_Wrapper.m_SousMarin_Deplacement;
        public InputAction @Vitesse => m_Wrapper.m_SousMarin_Vitesse;
        public InputActionMap Get() { return m_Wrapper.m_SousMarin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SousMarinActions set) { return set.Get(); }
        public void AddCallbacks(ISousMarinActions instance)
        {
            if (instance == null || m_Wrapper.m_SousMarinActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SousMarinActionsCallbackInterfaces.Add(instance);
            @Deplacement.started += instance.OnDeplacement;
            @Deplacement.performed += instance.OnDeplacement;
            @Deplacement.canceled += instance.OnDeplacement;
            @Vitesse.started += instance.OnVitesse;
            @Vitesse.performed += instance.OnVitesse;
            @Vitesse.canceled += instance.OnVitesse;
        }

        private void UnregisterCallbacks(ISousMarinActions instance)
        {
            @Deplacement.started -= instance.OnDeplacement;
            @Deplacement.performed -= instance.OnDeplacement;
            @Deplacement.canceled -= instance.OnDeplacement;
            @Vitesse.started -= instance.OnVitesse;
            @Vitesse.performed -= instance.OnVitesse;
            @Vitesse.canceled -= instance.OnVitesse;
        }

        public void RemoveCallbacks(ISousMarinActions instance)
        {
            if (m_Wrapper.m_SousMarinActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISousMarinActions instance)
        {
            foreach (var item in m_Wrapper.m_SousMarinActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SousMarinActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SousMarinActions @SousMarin => new SousMarinActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface ISousMarinActions
    {
        void OnDeplacement(InputAction.CallbackContext context);
        void OnVitesse(InputAction.CallbackContext context);
    }
}
